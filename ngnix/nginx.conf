worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    # ==========================
    # Upstream microservices
    # ==========================
    upstream auth-service {
        server localhost:8082;  # Auth microservice
    }

    upstream doctor-service {
        server localhost:8080;  # Doctor microservice
    }

    upstream patient-service {
        server localhost:8081;  # Patient microservice
    }

    # ==========================
    # Main API Gateway Server
    # ==========================
    server {
        listen 80;

        # ----------- AUTH ROUTES (login/signup) ------------
        location /auth/ {
            proxy_pass http://auth-service;
        }

        # ----------- DOCTOR ROUTES ------------
        location /doctor/ {
            # Step 1: Extract JWT
            set $auth_header $http_authorization;

            # Step 2: Validate JWT via auth-service
            auth_request /validate_token;

            # Step 3: Store user info from validation response
            auth_request_set $user_id   $upstream_http_x_user_id;
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_role $upstream_http_x_user_role;

            # Step 4: Forward user info downstream
            proxy_set_header X-User-Id   $user_id;
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Role $user_role;

            # Forward original Authorization header too (optional)
            proxy_set_header Authorization $auth_header;

            proxy_pass http://doctor-service;
        }

        # ----------- PATIENT ROUTES ------------
        location /patient/ {
            set $auth_header $http_authorization;

            auth_request /validate_token;

            auth_request_set $user_id   $upstream_http_x_user_id;
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_role $upstream_http_x_user_role;

            proxy_set_header X-User-Id   $user_id;
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Role $user_role;

            proxy_set_header Authorization $auth_header;

            proxy_pass http://patient-service;
        }

        # ----------- INTERNAL VALIDATION CALL ------------
        location = /validate_token {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
            proxy_pass http://auth-service/auth/validate;
        }

        # ----------- ERROR HANDLER ------------
        error_page 401 = @unauthorized;

        location @unauthorized {
            return 401 "Unauthorized - Invalid or Expired Token";
        }
    }
}
